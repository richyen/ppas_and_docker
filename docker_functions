 #!/bin/bash

######################################################################################
# Copyright EnterpriseDB Cooperation
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of PostgreSQL nor the names of its contributors
#      may be used to endorse or promote products derived from this
#      software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#  Author: Vibhor Kumar
#  E-mail ID: vibhor.aim@gmail.com
######################################################################################

######################################################################################
# function: print messages with process id
######################################################################################
function plog()
{
  echo "PID: $$ [RUNTIME: $(date +'%m-%d-%y %H:%M:%S')]: $*"  >&2
}

######################################################################################
# function: exit_error
######################################################################################
function exit_error()
{

  plog "ERROR: $*"
  exit 1
}

######################################################################################
# function: exit_success
######################################################################################
function exit_success()
{
  plog "SUCCESS: $*"
  exit 0
}

######################################################################################
# function: if_error
######################################################################################
function if_error
{
  typeset rc=$1
  shift
  typeset msg="$*"

  if [[ ${rc} -ne 0 ]]
  then
    exit_error "$msg; rc=${rc}"
  else
    return 0
  fi
}

######################################################################################
# function: get container ip address
######################################################################################
function container_ipaddr ()
{
  local C_NAME="$1"
  local container_ip=$(docker inspect --format='{{.NetworkSettings.IPAddress}}' ${C_NAME} 2>&1)
  if_error "$?" "${container_ip}"

  echo "${container_ip}"
}

######################################################################################
# function: list_containers
######################################################################################
function list_containers ()
{
  docker ps -a
}

######################################################################################
# function: container_status
######################################################################################
function container_status
{
  local C_NAME="$1"
  local container_status=$( docker inspect --format='{{ (index .State.Running)}}' "${C_NAME}" 2>&1)
  if_error $? "${container_status}"

  echo ${container_status}
}

######################################################################################
# function: list_images
######################################################################################
function list_images ()
{
  docker images
}

######################################################################################
# function: pseudo-ssh into a container
######################################################################################
function ssh_to_container ()
{
  local C_NAME="$1"
  docker exec -it ${C_NAME} "/bin/bash"
}

######################################################################################
# function: create_container
######################################################################################
function create_container ()
{
  local C_NAME="$1"
  local I_NAME="$2"

  messg=$(docker run --privileged=true --publish-all=true --interactive=false --tty=true -v ${HOME}/Code:/docker --hostname=${C_NAME} --detach=true --name=${C_NAME} ${I_NAME}  2>&1)
  echo "$?" "${messg}"
}

######################################################################################
# function: start_container
######################################################################################
function start_containers ()
{
  local C_NAMES="$@"

  local messg=$(docker start ${C_NAMES} 2>&1)
  echo "$?" "${messg}"
}

######################################################################################
# function: stop_containers
######################################################################################
function stop_container ()
{
  local C_NAMES="$@"

  local messg=$(docker stop --time=10 ${C_NAMES} 2>&1)
  echo "$?" "${messg}"
}

#######################################################################################
# function: docker_system_cleanup
#######################################################################################
function docker_system_cleanup ()
{
    docker system prune -f
}

#######################################################################################
# function: docker_volume_cleanup
#######################################################################################
function docker_volume_cleanup ()
{
    docker volume prune -f
}
